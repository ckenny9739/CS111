CS 111 - Lab 1C

Partners: Connor Kenny (304437322) and Jusin Liu (504487373)

NOTE: We have added our benchmarks to our make check as requested by the TA's.
      Our benchmarks require very large files and are created in a very specific way
      through our setup.sh script. This script runs at the beginning of make check and
      takes up to 20 seconds to run.
      DO NOT BE ALARMED BY THIS - LET IT RUN AND EVERYTHING WILL WORK OUT, WE PROMISE.

Implementation:
We used our implementation for lab 1B below as a base and expanded from there.

profile: At first, we played around with the get_rusage function to figure out exactly what it does.
	 Then we just put the calling part of the function at the beginning and end of each option.
	 The only tricky part was implementing the time for the children processes produced by command.
	 This was done in the wait portion so it only works with wait - if you don't use wait, no children
	 time will be outputted.
PDF: There is also a pdf that we turned in with the table of the comparisons and a conclusion drawn from that data.
     It has all the information for the comparisons.

setup.sh:

# Start of setup.sh

printf "Setup may take up to 20 seconds"

for i in {1..1000}
do
    base64 /dev/urandom | head -c 10 >> thousandLines.txt
        echo \n >> thousandLines.txt
	done

base64 /dev/urandom | head -c 10000000 > tenMB.txt
echo "output" > output.txt
echo "error" > error.txt

# End of setup.sh

benchmarks.sh:

# Start of benchmarks.sh

./simpsh \
	 --verbose \
	 --profile \
	 --rdonly tenMB.txt \
	 --pipe \
	 --pipe \
	 --creat --trunc --wronly output.txt \
	 --creat --append --wronly error.txt \
	 --command 3 5 6 tr A-Z a-z \
	 --command 0 2 6 sort \
	 --command 1 4 6 cat output.txt - \
	 --wait

printf "\n"

./simpsh \
	 --verbose \
	 --profile \
	 --rdonly tenMB.txt \
	 --pipe \
	 --pipe \
	 --creat --trunc --wronly output.txt \
	 --creat --append --wronly error.txt \
	 --command 3 5 6 uniq -u \
	 --command 0 2 6 sed -e 's/\(.*\)/\L\1/' \
	 --command 1 4 6 cat output.txt - \
	 --wait

printf "\n"

./simpsh \
	 --verbose \
	 --profile \
	 --rdonly thousandLines.txt \
	 --pipe \
	 --pipe \
	 --creat --trunc --wronly output.txt \
	 --creat --append --wronly error.txt \
	 --append --rdwr tenMB.txt \
	 --command 1 4 6 sort \
	 --command 0 2 6 cat tenMB.txt - \
	 --command 3 5 6 sed ':a;N;$!ba;s/\n/ /g'  \
	 --wait

# End of benchmarks.sh

Limitations:
No known limitations for Lab 1C

Extra Features:
No Extra Features for Lab 1C

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
CS 111 - Lab 1B

Partners: Connor Kenny (304437322) and Jusin Liu (504487373)

Implementation:

We used our implementation for lab 1A below as a base and expanded from there.

oflag options: We simply made a bit_mask and OR'd them as the options were called. Then we reset it back to 0 upon open.
rdwr: Same implementation as rdonly and wronly except it is rdwr in the open call.
pipe: We checked to make sure there was space for 2 file descriptors and then called pipe. Then we added those new
      file descriptors to our array. The trickier part is learning how to use the pipes correctly.
wait: We set a wait flag if this option was called. Then at the end of the parent process, we wait for all the child processes
      with the wait(&status) call - could have used waitpid(-1 ...) but it is easier. We close all file descriptors in the parent
      when wait is called. This means that wait must be the last command, but it takes the error checking off of the user.
      This is still within the rules according to the TA's.
close: We just used the close() call on the file descriptor in our array
abort: Use raise() to force a segmentation fault.
catch, ignore, default: We created a very simple signal handler for catch and just used the basic options for ignore
      and default, respectively.
pause: We called pause.

Limitations:
No known limitations for Lab 1B

Extra Features:
No Extra Features for Lab 1B

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
CS 111 - Lab 1A

Partners: Connor Kenny (304437322) and Jusin Liu (504487373)

Implementation:

We used an array of option structs to hold each of our 4 viable options. Then using
a while loop we could go through each of the arguments passed to simpsh.
This lead into a switch statement for each of the options. This allowed us to
make sure that each one did the appropriate thing. --rdonly and --wronly simply
open a file to be read or written into. --verbose sets a verbose flag that will
print out the option and arguments each time through the while loop after the flag
is set. Finally, --command's implementation is more complicated. It involves creating
child processes for each command via a fork() call. Then we used dup2() to set the
correct file descriptors (3 calls - 1 for input, 1 for output, 1 for error). Finally,
we used execvp() to actually issue the command. This basically rids us of the child
process (because it has been used up for execvp()) and leaves the main process
to go through the rest of the options.

This implementation should work on all test cases, inlcuding multiple --verbose
options and multiple --command options. 

Limitations:
No known limitations for Lab 1A

Extra Features:
No Extra Features for Lab 1A

